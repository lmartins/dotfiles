"-----------------------------------------------------------------------------
" SETUP
"-----------------------------------------------------------------------------

"The super basic stuff:
set encoding=utf-8        "UTF8 All day, every day
set nocompatible          "Use vim settings, not vi settings. Affects a lot.

set wildignore+=*/.git/*,*/.idea/*,*/.DS_Store,bower_components/*,node_modules/*,jspm_packages/*,build/*


" Check if git is available and if vundle is already installed  {{{
if executable("git") != 1 && !filereadable($HOME."/.dotfiles/bundle/vundle/README.md")
    echo "GIT is required to install bundles:"
else
    source $HOME/.dotfiles/vim/partials/bundles.vim
    source $HOME/.dotfiles/vim/partials/settings.vim
    " source $HOME/.dotfiles/vim/partials/status-line.vim
    " source $HOME/.dotfiles/vim/partials/autocomplete.vim
    " source $HOME/.dotfiles/vim/partials/php.vim
    " source $HOME/.dotfiles/vim/partials/html.vim
endif


"-----------------------------------------------------------------------------
" EXTRA COMMANDS AND EXTENDED FUNCTIONALITY
"-----------------------------------------------------------------------------

"Indentation like textmate/sublime
nnoremap <D-[> <<
nnoremap <D-]> >>
inoremap <D-[> <esc><<A
inoremap <D-]> <esc>>>A
xnoremap <D-[> <gv
xnoremap <D-]> >gv

"Easier window navigation, control+letter moves in that direction
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"emacs style jump to end of line in insert mode
"prevents conflict with autocomplete
inoremap <expr> <c-e> pumvisible() ? "\<c-e>" : "\<c-o>A"
inoremap <C-a> <C-o>I

" Bubble lines, preserves indentation, courtesy of -romainl-
nnoremap <silent> <C-Up>   :move-2<CR>==
nnoremap <silent> <C-Down> :move+<CR>==
xnoremap <silent> <C-Up>   :move-2<CR>gv=gv
xnoremap <silent> <C-Down> :move'>+<CR>gv=gv

"Duplicate lines above and below
inoremap <C-A-down> <esc>Ypk
nnoremap <C-A-down> Ypk
xnoremap <C-A-down> y`>pgv
inoremap <C-A-up> <esc>YPj
nnoremap <C-A-up> YPj
xnoremap <C-A-up> y`<Pgv

"Select a line without trailing whitespace or linebreaks
nnoremap <leader>l <esc>^vg_

"Remap j and k to act as expected when used on long, wrapped, lines
nnoremap j gj
nnoremap k gk

"Open line above (ctrl-shift-o much easier than ctrl-o shift-O)
"SO USEFUL!!!
inoremap <C-Enter> <C-o>o
inoremap <C-S-Enter> <C-o>O


"Map space to search and shift-space to backwards search
nnoremap <space> /
nnoremap <S-space> ?

"Map for removing search highlighting
nnoremap <silent> <leader><cr> :noh<cr>

"Shortcut for editing my vimrc and gvimrc in a new tab
nnoremap <leader>vv :tabedit $MYVIMRC<cr>
nnoremap <leader>vg :tabedit $MYGVIMRC<cr>
nnoremap <leader>vl :tabedit ~/.vimrc.local<cr>

"Commands for opening the current file or directory in another application
nnoremap <silent> <leader>oc :silent !open -a /Applications/Google\ Chrome.app/ %<cr>
nnoremap <silent> <leader>of :silent !open -a /Applications/Firefox.app/ %<cr>
nnoremap <silent> <leader>os :silent !open -a /Applications/Safari.app/ %<cr>
nnoremap <silent> <leader>ot :silent !open -a /Applications/iTerm.app/ %:p:h<cr>
nnoremap <silent> <leader>oi :silent !open .<cr>

"Will open files in current directory, allows you to leave the working cd in
"the project root. You can also use %% anywhere in the command line to expand.
cnoremap %% <C-R>=expand('%:h').'/'<cr>
nmap <leader>ew :e %%
nmap <leader>es :sp %%
nmap <leader>ev :vsp %%
nmap <leader>et :tabe %%


"Change current directory to that of the file in the buffer with CMD + D
nnoremap <silent> <D-d> :cd %:p:h<cr


"Jump back to last edited buffer
nnoremap <D-b> <C-^>
inoremap <D-b> <esc><C-^>

" Search documentation in Dash.app (OSX only)
nmap <silent> <leader>d <Plug>DashSearch


" ChangeInside
nnoremap <silent> <Leader>c :ChangeInsideSurrounding<CR>
nnoremap <silent> <Leader>C :ChangeAroundSurrounding<CR>

" Close open Tags
" Find way to map these keys
"inoremap <D-.> </<C-X><C-O>
" imap <D-.> </<C-X><C-O>

" Keep search matches in the middle of the screen
nnoremap n nzz
nnoremap N Nzz

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

"set Y to duplicate line or selection
nmap Y yyp
vmap Y y`>pgv " Duplicates then regains selection.


" Switch between the last two files
" nnoremap <leader><leader> <c-^>

" Auto indent when opening brackets and moving to a new line
inoremap <C-Return> <Esc>$T{i<CR><CR><C-o>k<Tab>


" Move to next/previous line with same indentation
nnoremap <M-,> :call search('^'. matchstr(getline('.'), '\(^\s*\)') .'\%<' . line('.') . 'l\S', 'be')<CR>
nnoremap <M-.> :call search('^'. matchstr(getline('.'), '\(^\s*\)') .'\%>' . line('.') . 'l\S', 'e')<CR>

" Close buffers without closing window
:nnoremap <Leader>q :Bdelete<CR>

"-----------------------------------------------------------------------------
" HELPER FUNCTIONS
"-----------------------------------------------------------------------------

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-
augroup END


"Autoclose unactive buffers - activate with :call CloseHiddenBuffers()
"http://stackoverflow.com/questions/2974192/how-can-i-pare-down-vims-buffer-list-to-only-include-active-buffers
command! -nargs=* Only call s:CloseHiddenBuffers()
function! s:CloseHiddenBuffers()
  " figure out which buffers are visible in any tab
  let visible = {}
  for t in range(1, tabpagenr('$'))
    for b in tabpagebuflist(t)
      let visible[b] = 1
    endfor
  endfor
  " close any buffer that are loaded and not visible
  let l:tally = 0
  for b in range(1, bufnr('$'))
    if bufloaded(b) && !has_key(visible, b)
      let l:tally += 1
      exe 'bw ' . b
    endif
  endfor
  echon "Deleted " . l:tally . " buffers"
endfun

map <leader>bc :call CloseHiddenBuffers()<cr>


"Make .vimrc edits active without relaunch
if has("autocmd")
  augroup myvimrchooks
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
  augroup END
endif



"-------------------"
" FILETYPE SETTINGS
"-------------------"

if has("autocmd")
    au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery
    au BufRead,BufNewFile *.txt,*.text set filetype=markdown
    au BufRead,BufNewFile *.scss set ft=scss.css
    " au FileType html,xhtml,css,scss,ruby,eruby,liquid,pml,yaml,php,coffee,vim setlocal ts=2 sts=2 sw=2 expandtab
    au FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab
    au FileType css,scss,sass setlocal iskeyword+=-
    au FileType markdown setlocal spell

	" Use emmet only for html and css files
	let g:user_emmet_install_global = 0
	au FileType html,css,scss EmmetInstall
endif

"Easy filetype switching
nnoremap _md :set ft=markdown<CR>
nnoremap _hh :set ft=html<CR>
nnoremap _js :set ft=javascript<CR>
nnoremap _jq :set ft=javascript syntax=jQuery<CR>
nnoremap _pp :set ft=php<CR>




"-------------------"
" PLUGIN SETTINGS
"-------------------"


"-----------------------------------------------------------------------------
" STATUS LINE

set laststatus=2          "Always show status line

"Syntastic Status Line
" let g:syntastic_stl_format = '[%E{Err: L%fe #%e}%B{, }%W{Warn: L%fw #%w}]'

"Status line
set statusline=\ %f\ %m\ %r%=%{SyntasticStatuslineFlag()}\ \ \ %y%12.12(%l\,\ %c%V%)%6.6p%%\



" -----------------------------------------------------------------------------
" AIRLINE CONFIG
" let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" let g:airline_theme = 'powerlineish'

"Quick Mappings
nnoremap <F10> :NERDTreeToggle<cr>
imap <F10> <Esc>:NERDTreeToggle<cr>i
nmap ,r :NERDTreeFind<CR>
nnoremap <F2> :GundoToggle<CR>
imap <F2> <Esc>:GundoToggle<cr>i
" nnoremap <silent> <F3> :YRShow<cr>
" inoremap <silent> <F3> <ESC>:YRShow<cr>

" CtrlP
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader><space> :CtrlPBuffer<cr>


" ------------------------------------
" TAGBAR
noremap <F11> :TagbarToggle<cr>

let g:tagbar_type_css = {
\ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
\ }


" -----------------------------------------------------------------------------
" TABULARIZE Mappings

if exists(":Tabularize")
	nmap <Leader>a= :Tabularize /=<CR>
	vmap <Leader>a= :Tabularize /=<CR>
	nmap <Leader>a: :Tabularize /:\zs<CR>
	vmap <Leader>a: :Tabularize /:\zs<CR>
endif



" ------------------------------------
" The Silver Searcher
" http://robots.thoughtbot.com/faster-grepping-in-vim
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif


" -------------------------------------------
" Wildfire quick select
nmap <leader>s <Plug>(wildfire-quick-select)
" use '*' to mean 'all other filetypes'
" in this example, html and xml share the same text objects
" let g:wildfire_objects = {
"     \ "*" : ["i'", 'i"', "i)", "i]", "i}"],
"     \ "html,xml,twig" : ["at","it"],
" \ }



" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>


"Ctrl-P - see gvimrc for remappings
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_working_path_mode = ''
let g:ctrlp_custom_ignore = '\v[\/](jspm_packages|node_modules|bower_components|dist|build)|(\.(swp|ico|git|svn))$'



" -----------------------------------------------------------------------------
" EMMET

"Change emmet expansion key to command + e
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")  This breaks Supertab, find a way to do  it
let g:user_emmet_expandabbr_key = '<D-e>'
let g:user_emmet_next_key = '<C-f>'


" -----------------------------------------------------------------------------
" EASYMOTION
let g:EasyMotion_leader_key = ',,'
" map <Leader> <Plug>(easymotion-prefix)


" -----------------------------------------------------------------------------
" SYNTASTIC
let g:syntastic_mode_map = { 'mode': 'passive',
                           \ 'active_filetypes': ['html', 'javascript', 'php'] }
let g:syntastic_javascript_jshint_args = '--config /Users/luismartins/.jshintrc'

"NerdTree
let NERDTreeMinimalUI = 0
let NERDTreeDirArrows = 1
let NERDTreeShowHidden = 1
let NERDTreeIgnore=['.git[[dir]]', 'node_modules', 'bower_components', 'jspm_packages', '\.DS_Store']


" -----------------------------------------------------------------------------
" ULTISNIPS
let g:UltiSnipsEditSplit="vertical"


" -----------------------------------------------------------------------------
" COSCO
" VIM colon and semicolon insertion bliss
autocmd FileType javascript,css,scss nnoremap <silent> <Leader>; :call cosco#commaOrSemiColon()<CR>
autocmd FileType javascript,css,scss inoremap <silent> <Leader>; <c-o>:call cosco#commaOrSemiColon()<CR>


" -----------------------------------------------------------------------------
" GTFO calls iTerm instead of terminal
let g:gtfo#terminals = { 'mac' : 'iterm' }



"------------------------------------------------------------------------------
" DELIMITMATE

" Delimitmate place cursor correctly n multiline objects e.g.
" if you press enter in {} cursor still be
" in the middle line instead of the last
let delimitMate_expand_cr = 1

" Delimitmate place cursor correctly in singleline pairs e.g.
" if x - cursor if you press space in {x} result will be { x } instead of { x}
let delimitMate_expand_space = 1


"-----------------------------------------------------------------------------
" MACHINE SPECIFIC SETTINGS
"-----------------------------------------------------------------------------

if filereadable(glob("$HOME/.vimrc.local"))
  source $HOME/.vimrc.local
endif
